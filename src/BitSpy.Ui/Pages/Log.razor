@page "/logs"
@using BitSpy.Ui.Response
@inject HttpClient client

<PageTitle>Logs</PageTitle>

<h1>Logs</h1>

<div class="mb-3">
    <label for="timeRange">Select Time Range:</label>
    <select class="form-select" id="timeRange" @onchange="OnTimeRangeChange">
        <option value="1">Today</option>
        <option value="7">Last 7 days</option>
        <option value="30">Last 30 days</option>
        <!-- Add more options as needed -->
    </select>
</div>

<div class="mb-3">
    <label for="logLevel">Filter by Log Level:</label>
    <select class="form-select" id="logLevel" @onchange="OnLogLevelChange">
        <option value="">All</option>
        <option value="ERROR">Error</option>
        <option value="WARNING">Warning</option>
        <option value="INFO">Info</option>
        <option value="CRITICAL">Critical</option>
    </select>
</div>

@if (logs.Any())
{
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Level</th>
                <th>Date</th>
                <th>Time</th>
                <th>Log Template</th>
                <th>Properties</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in filteredLogs)
            {
                <tr class="@GetLogLevelColor(log.Level)">
                    <td>@log.Level</td>
                    <td>@log.Timestamp.Date.ToShortDateString()</td>
                    <td>@log.Timestamp.TimeOfDay</td>
                    <td>@log.LogTemplate</td>
                    <td>
                        <ul>
                            @foreach (var property in log.LogValues)
                            {
                                <li>@property</li>
                            }
                        </ul>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No logs found.</p>
}

@code {
    private List<LogResponse> logs = new();
    private List<LogResponse> filteredLogs = new();
    private int selectedTimeRange = 1; // Default time range is today
    private string selectedLogLevel = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        var startingDate = DateTime.Now.AddDays(-selectedTimeRange);
        var endingDate = DateTime.Now;
        var response = await client.GetAsync($"{ApiConstants.ApiUrl}/logs?startingTimeStamp={startingDate}&endingTimeStamp={endingDate}");
        logs = await response.Content.ReadFromJsonAsync<List<LogResponse>>() ?? new List<LogResponse>();
        ApplyLogFilters();
    }

    private void ApplyLogFilters()
    {
        filteredLogs = logs
            .Where(log => string.IsNullOrEmpty(selectedLogLevel) || string.Equals(log.Level, selectedLogLevel, StringComparison.CurrentCultureIgnoreCase))
            .ToList();
    }

    private async Task OnTimeRangeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int timeRange))
        {
            selectedTimeRange = timeRange;
            await LoadLogs();
        }
    }

    private async Task OnLogLevelChange(ChangeEventArgs e)
    {
        selectedLogLevel = e.Value?.ToString() ?? "";
        ApplyLogFilters();
    }

    private string GetLogLevelColor(string logLevel)
    {
        switch (logLevel.ToUpper())
        {
            case "ERROR":
                return "table-danger";
            case "WARNING":
                return "table-warning";
            case "INFO":
                return "table-info";
            case "CRITICAL":
                return "table-critical";
            default:
                return "";
        }
    }
}
